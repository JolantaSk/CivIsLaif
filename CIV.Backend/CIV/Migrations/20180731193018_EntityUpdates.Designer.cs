// <auto-generated />
using System;
using CIV.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CIV.Migrations
{
    [DbContext(typeof(CivDbContext))]
    [Migration("20180731193018_EntityUpdates")]
    partial class EntityUpdates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CIV.Entities.ActivePhase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PhaseId");

                    b.HasKey("Id");

                    b.HasIndex("PhaseId");

                    b.ToTable("ActivePhase");
                });

            modelBuilder.Entity("CIV.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatorId")
                        .IsRequired();

                    b.Property<bool>("IsPaused");

                    b.Property<string>("Name");

                    b.Property<Guid?>("TurnId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TurnId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("CIV.Entities.Pause", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("GameId");

                    b.Property<DateTimeOffset>("StartedOn");

                    b.Property<DateTimeOffset?>("StopedOn");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Pause");
                });

            modelBuilder.Entity("CIV.Entities.Phase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("NextPhaseId");

                    b.Property<bool>("SimultaniousTurns");

                    b.HasKey("Id");

                    b.HasIndex("NextPhaseId")
                        .IsUnique()
                        .HasFilter("[NextPhaseId] IS NOT NULL");

                    b.ToTable("Phase");
                });

            modelBuilder.Entity("CIV.Entities.Player", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<Guid?>("GameId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CIV.Entities.PlayerTurn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivePhaseId");

                    b.Property<DateTimeOffset?>("FinishedOn");

                    b.Property<string>("PlayerId");

                    b.Property<DateTimeOffset?>("StartedOn");

                    b.HasKey("Id");

                    b.HasIndex("ActivePhaseId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTurn");
                });

            modelBuilder.Entity("CIV.Entities.PlayerTurnOrder", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<string>("PlayerId");

                    b.Property<Guid?>("TurnOrderId");

                    b.HasKey("_id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TurnOrderId");

                    b.ToTable("PlayerTurnOrder");
                });

            modelBuilder.Entity("CIV.Entities.Turn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CurrentPhaseId");

                    b.Property<Guid>("TurnOrderId");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPhaseId");

                    b.HasIndex("TurnOrderId");

                    b.ToTable("Turn");
                });

            modelBuilder.Entity("CIV.Entities.TurnOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("TurnOrder");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CIV.Entities.ActivePhase", b =>
                {
                    b.HasOne("CIV.Entities.Phase", "Phase")
                        .WithMany()
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CIV.Entities.Game", b =>
                {
                    b.HasOne("CIV.Entities.Player", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CIV.Entities.Turn", "Turn")
                        .WithMany()
                        .HasForeignKey("TurnId");
                });

            modelBuilder.Entity("CIV.Entities.Pause", b =>
                {
                    b.HasOne("CIV.Entities.Game")
                        .WithMany("Pauses")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("CIV.Entities.Phase", b =>
                {
                    b.HasOne("CIV.Entities.Phase", "NextPhase")
                        .WithOne()
                        .HasForeignKey("CIV.Entities.Phase", "NextPhaseId");
                });

            modelBuilder.Entity("CIV.Entities.Player", b =>
                {
                    b.HasOne("CIV.Entities.Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("CIV.Entities.PlayerTurn", b =>
                {
                    b.HasOne("CIV.Entities.ActivePhase")
                        .WithMany("_playerTurns")
                        .HasForeignKey("ActivePhaseId");

                    b.HasOne("CIV.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("CIV.Entities.PlayerTurnOrder", b =>
                {
                    b.HasOne("CIV.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("CIV.Entities.TurnOrder")
                        .WithMany("_turnOrders")
                        .HasForeignKey("TurnOrderId");
                });

            modelBuilder.Entity("CIV.Entities.Turn", b =>
                {
                    b.HasOne("CIV.Entities.ActivePhase", "CurrentPhase")
                        .WithMany()
                        .HasForeignKey("CurrentPhaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CIV.Entities.TurnOrder", "TurnOrder")
                        .WithMany()
                        .HasForeignKey("TurnOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CIV.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CIV.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CIV.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CIV.Entities.Player")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
